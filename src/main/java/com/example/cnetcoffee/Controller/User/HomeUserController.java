package com.example.cnetcoffee.Controller.User;

import com.example.cnetcoffee.Controller.socket.ClientSocketHandler;
import com.example.cnetcoffee.Model.Session;
import com.example.cnetcoffee.Model.User;
import com.example.cnetcoffee.dao.ComputerDB;
import com.example.cnetcoffee.dao.SessionDAO;
import com.example.cnetcoffee.dao.UserDB;
import com.example.cnetcoffee.dao.UserManagerDAO;
import com.example.cnetcoffee.utils.SessionManager;
import com.example.cnetcoffee.utils.StageManager;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import java.math.BigDecimal;
import java.net.URL;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ResourceBundle;

public class HomeUserController implements Initializable {
    @FXML
    private Button btLogOut;
    @FXML
    private Button btProfile;
    @FXML
    private Button btnChatUser;
    @FXML
    private TextField tfTotalTime;
    @FXML
    private TextField tfUsedTime;
    @FXML
    private TextField tfRemainingTime;
    @FXML
    private TextField tfTotalCost;
    @FXML
    private TextField tfBalance;
    @FXML
    private Button btn_menuOrder;

    private boolean disableLogout = false;

    private Timeline timeline;

    public void setLogoutDisabled(boolean disable) {
        this.disableLogout = disable;
    }

    @FXML
    void btnChatUser(ActionEvent event) {
        int receiverId = UserDB.getActiveAdminOrStaffId();
        int sessionId = SessionManager.getCurrentSessionId();

        if (receiverId > 0 && sessionId > 0) {
            SessionManager.setReceiverUserId(receiverId);
            SessionManager.setCurrentSessionId(sessionId);
            StageManager.openPopup("/com/example/cnetcoffee/user/chat.fxml", "Message");
        } else {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y admin/staff ƒëang ho·∫°t ƒë·ªông ho·∫∑c session ch∆∞a kh·ªüi t·∫°o.");
        }
    }

    @FXML
    void btLogOut(ActionEvent event) {

        // D·ª´ng Timeline tr∆∞·ªõc khi ƒëƒÉng xu·∫•t
        if (timeline != null) {
            timeline.stop();
            System.out.println("‚úÖ Timeline ƒë√£ d·ª´ng.");
        }

        int computerId = SessionManager.getAssignedComputerId();

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i m√°y t√≠nh
        ComputerDB.updateComputerStatus(computerId, "READY", true);
        ClientSocketHandler.sendCommand("READY " + computerId);

        // L∆∞u tin nh·∫Øn v√†o DB tr∆∞·ªõc khi k·∫øt th√∫c phi√™n
        int sessionId = SessionManager.getCurrentSessionId();
        SessionManager.unregisterUserSession(sessionId);
        System.out.println("üì• L∆∞u tin nh·∫Øn v√†o DB cho sessionId: " + sessionId);

        SessionDAO sessionDAO = new SessionDAO();
        Session endedSession = sessionDAO.endSession(sessionId);

        if (endedSession != null) {
            System.out.println("üïí K·∫øt th√∫c l√∫c: " + endedSession.getEndTime());
            System.out.println("‚è± T·ªïng ph√∫t ƒë√£ ch∆°i: " + endedSession.getTotalMinutes());
        }

        // L·∫•y total_cost v·ª´a t√≠nh xong (∆∞u ti√™n l·∫•y t·ª´ endedSession)
        BigDecimal totalCost = (endedSession != null) ? endedSession.getTotalCost() : null;

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng
        User currentUser = SessionManager.getCurrentUser();
        if (currentUser != null && totalCost != null) {
            BigDecimal newBalance = currentUser.getBalance().subtract(totalCost);
            // C·∫≠p nh·∫≠t balance v√†o DB
            UserManagerDAO.updateUserBalance(currentUser.getUserId(), newBalance);
            // C·∫≠p nh·∫≠t l·∫°i balance trong SessionManager (n·∫øu c·∫ßn)
            currentUser.setBalance(newBalance);

            UserManagerDAO.updateUserStatus(currentUser.getUserId(), "inactive");
            new UserManagerDAO().updateAssignedComputerId(currentUser.getUserId(), null);
        } else if (currentUser != null) {
            // N·∫øu kh√¥ng c√≥ totalCost, v·∫´n c·∫≠p nh·∫≠t tr·∫°ng th√°i user
            UserManagerDAO.updateUserStatus(currentUser.getUserId(), "inactive");
            new UserManagerDAO().updateAssignedComputerId(currentUser.getUserId(), null);
        }

        // Reset to√†n b·ªô tr·∫°ng th√°i
        SessionManager.reset();

        // Chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
        Stage stage = StageManager.getPrimaryStage();
        stage.setMinWidth(0);
        stage.setMinHeight(0);
        stage.setMaxWidth(Double.MAX_VALUE);
        stage.setMaxHeight(Double.MAX_VALUE);

        StageManager.switchSceneLoginUser(
                "/com/example/cnetcoffee/user/login_user.fxml",
                "C-NETCOFFEE!",
                false,
                "/img/LOGOC.png"
        );
    }

    @FXML
    void btProfile(ActionEvent event) {
        StageManager.openPopup("/com/example/cnetcoffee/user/profile_user.fxml", "Th√¥ng tin ng∆∞·ªùi d√πng");
    }

    public void btn_menuOrder(ActionEvent actionEvent) {
        StageManager.openPopup("/com/example/cnetcoffee/user/menuOrder.fxml", "MENU ORDER");
    }

    public void updateUserData(String totalTime, String usedTime, String remainingTime, String totalCost, String balance) {
        tfTotalTime.setText(totalTime);
        tfUsedTime.setText(usedTime);
        tfRemainingTime.setText(remainingTime);
        tfTotalCost.setText(totalCost);
        tfBalance.setText(balance);
    }

    public void loadUserData() {
        User currentUser = SessionManager.getCurrentUser();
        Session currentSession = SessionManager.getCurrentSession();

        if (currentUser != null && currentSession != null) {
            BigDecimal balance = currentUser.getBalance();
            LocalDateTime startTime = currentSession.getStartTime();
            String computerType = currentSession.getComputerType();

            System.out.println("Start Time: " + startTime); // Debug gi√° tr·ªã startTime
            System.out.println("Computer Type: " + computerType); // Debug gi√° tr·ªã computerType

            String usedTime = calculateUsedTime(startTime);
            String remainingTime = calculateRemainingTime(balance, computerType, startTime);
            String totalTime = estimateTotalTime(balance, computerType);
            String totalCost = calculateTotalCost(computerType, startTime);
            String balanceStr = String.format("%,.2f", balance); // hi·ªÉn th·ªã s·ªë c√≥ d·∫•u ph·∫©y

            System.out.println("Used Time: " + usedTime); // Debug gi√° tr·ªã th·ªùi gian ƒë√£ s·ª≠ d·ª•ng
            System.out.println("Total Cost: " + totalCost); // Debug gi√° tr·ªã t·ªïng chi ph√≠


            updateUserData(totalTime, usedTime, remainingTime, totalCost, balanceStr);
        }
    }

    private String calculateUsedTime(LocalDateTime startTime) {
        LocalDateTime now = LocalDateTime.now();
        if (startTime == null) return "00:00:00";

        long elapsedSeconds = Duration.between(startTime, now).getSeconds();
        if (elapsedSeconds < 1) elapsedSeconds = 1; // Gi·∫£ l·∫≠p th·ªùi gian t·ªëi thi·ªÉu l√† 1 gi√¢y

        long hours = elapsedSeconds / 3600;
        long minutes = (elapsedSeconds % 3600) / 60;
        long seconds = elapsedSeconds % 60;

        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }

    private String calculateRemainingTime(BigDecimal balance, String type, LocalDateTime startTime) {
        int pricePerHour = com.example.cnetcoffee.dao.PriceDAO.getPricePerHour(type);
        double pricePerSecond = pricePerHour / 3600.0;

        long elapsedSeconds = Duration.between(startTime, LocalDateTime.now()).getSeconds();
        double amountUsed = elapsedSeconds * pricePerSecond;
        double remainingBalance = balance.doubleValue() - amountUsed;

        if (remainingBalance <= 0) return "00:00:00";

        double remainingSeconds = remainingBalance / pricePerSecond;
        long rs = (long) remainingSeconds;

        long hours = rs / 3600;
        long minutes = (rs % 3600) / 60;
        long seconds = rs % 60;

        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }

    private String estimateTotalTime(BigDecimal balance, String type) {
        int pricePerHour = com.example.cnetcoffee.dao.PriceDAO.getPricePerHour(type); // L·∫•y gi√° t·ª´ DB
        if (pricePerHour <= 0) return "00:00:00"; // Tr√°nh chia cho 0

        double totalSeconds = balance.doubleValue() * 3600 / pricePerHour;
        long seconds = (long) totalSeconds;

        long hours = seconds / 3600;
        long minutes = (seconds % 3600) / 60;
        long secs = seconds % 60;

        return String.format("%02d:%02d:%02d", hours, minutes, secs);
    }

    private String calculateTotalCost(String type, LocalDateTime startTime) {
        LocalDateTime now = LocalDateTime.now();
        if (type == null || startTime == null) return "0.00";

        int pricePerHour = com.example.cnetcoffee.dao.PriceDAO.getPricePerHour(type);
        double pricePerSecond = pricePerHour / 3600.0;

        long elapsedSeconds = Duration.between(startTime, now).getSeconds();
        if (elapsedSeconds < 1) elapsedSeconds = 1; // Gi·∫£ l·∫≠p th·ªùi gian t·ªëi thi·ªÉu l√† 1 gi√¢y

        double cost = elapsedSeconds * pricePerSecond;

        return String.format("%,.2f", cost);
    }

    private BigDecimal calculateUpdatedBalance(BigDecimal balance, String type, LocalDateTime startTime) {
        int pricePerHour = com.example.cnetcoffee.dao.PriceDAO.getPricePerHour(type);
        double pricePerSecond = pricePerHour / 3600.0;

        long elapsedSeconds = Duration.between(startTime, LocalDateTime.now()).getSeconds();
        double amountUsed = elapsedSeconds * pricePerSecond;

        double updatedBalance = balance.doubleValue() - amountUsed;
        return BigDecimal.valueOf(Math.max(updatedBalance, 0)); // ƒê·∫£m b·∫£o kh√¥ng √¢m
    }

    private void updateRealTimeData() {
        Session currentSession = SessionManager.getCurrentSession();

        if (currentSession != null) {
            LocalDateTime startTime = currentSession.getStartTime();
            String computerType = currentSession.getComputerType();

            String usedTime = calculateUsedTime(startTime);
            String totalCost = calculateTotalCost(computerType, startTime);

            tfUsedTime.setText(usedTime);
            tfTotalCost.setText(totalCost);

            // Kh√°ch v√£ng lai: th·ªùi gian c√≤n l·∫°i v√† s·ªë d∆∞ t√†i kho·∫£n c√≥ th·ªÉ ƒë·ªÉ m·∫∑c ƒë·ªãnh
            if (SessionManager.isGuestMode()) {
                tfRemainingTime.setText("9999");
                tfBalance.setText("0.00");
            } else {
                // User th·∫≠t: t√≠nh to√°n nh∆∞ c≈©
                User currentUser = SessionManager.getCurrentUser();
                if (currentUser != null) {
                    BigDecimal balance = currentUser.getBalance();
                    String remainingTime = calculateRemainingTime(balance, computerType, startTime);
                    BigDecimal updatedBalance = calculateUpdatedBalance(balance, computerType, startTime);
                    tfRemainingTime.setText(remainingTime);
                    tfBalance.setText(String.format("%,.2f", updatedBalance));
                }
            }
        }
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        javafx.application.Platform.runLater(() -> {
            if (disableLogout && btLogOut != null) {
                btLogOut.setDisable(true);
            }
            if (SessionManager.isGuestMode()) {
                tfTotalTime.setText("9999");

                // L·∫•y session ACTIVE cho guest_user v√† m√°y n√†y
                int guestUserId = com.example.cnetcoffee.dao.UserDB.getGuestUserId();
                int computerId = SessionManager.getAssignedComputerId();
                Session session = new com.example.cnetcoffee.dao.SessionDAO().getActiveSessionByUserAndComputer(guestUserId, computerId);
                SessionManager.setCurrentSession(session);

                // N·∫øu mu·ªën, c√≥ th·ªÉ set balance 0 cho kh√°ch v√£ng lai
                // (ho·∫∑c s·ª≠a updateRealTimeData ƒë·ªÉ kh√¥ng l·∫•y balance t·ª´ user)
            } else {
                loadUserData();
            }


            // Kh·ªüi t·∫°o Timeline ƒë·ªÉ c·∫≠p nh·∫≠t th·ªùi gian th·ª±c
            timeline = new Timeline(new KeyFrame(javafx.util.Duration.seconds(1), event -> {
                updateRealTimeData(); // C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªói gi√¢y
            }));
            timeline.setCycleCount(Animation.INDEFINITE); // L·∫∑p v√¥ h·∫°n
            timeline.play();
            System.out.println("‚úÖ Timeline ƒë√£ b·∫Øt ƒë·∫ßu.");
        });
    }
}
