package com.example.cnetcoffee.Controller.Admin;

import com.example.cnetcoffee.Controller.socket.ClientSocketHandler;
import com.example.cnetcoffee.Model.Computer;
import com.example.cnetcoffee.Model.Session;
import com.example.cnetcoffee.Model.User;
import com.example.cnetcoffee.dao.ComputerDB;
import com.example.cnetcoffee.dao.DBConnect;
import com.example.cnetcoffee.dao.SessionDAO;
import com.example.cnetcoffee.dao.UserDB;
import com.example.cnetcoffee.utils.SessionManager;
import com.example.cnetcoffee.utils.StageManager;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.Cursor;
import javafx.scene.Node;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.*;
import javafx.scene.text.Text;
import javafx.util.Duration;
import javafx.util.Pair;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.Normalizer;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.regex.Pattern;

public class HomeAdminController implements Initializable {
    @FXML
    private AnchorPane apHome;

    @FXML
    private AnchorPane apMenu;

    @FXML
    private AnchorPane apTitle;

    @FXML
    private TextField tfSearchPC;

    @FXML
    private Button btHome;

    @FXML
    private Button btIndividual;

    @FXML
    private ImageView btLogout;

    @FXML
    private Button btManagement;

    @FXML
    private Button btStatistical;

    @FXML
    private AnchorPane homeAdmin;

    @FXML
    private Label Notification;

    @FXML
    private Text user;

    @FXML
    private Button btAddPC;

    @FXML
    private FlowPane flowPaneNormal;

    @FXML
    private FlowPane flowPaneVIP;

    // th√¥ng b√°o
    @FXML
    private Label lbOrderCount;

    @FXML
    void btAdminChat(ActionEvent event) {
        StageManager.openPopup("/com/example/cnetcoffee/admin/Chat_manager.fxml", "Message");
    }


    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n
    public void updateOrderCount() {
        int confirmedOrderCount = getConfirmedOrderCount();
        lbOrderCount.setText(String.valueOf(confirmedOrderCount));
    }
    public static int getConfirmedOrderCount() {
        int confirmedOrderCount = 0;
        String query = "SELECT COUNT(*) FROM orders WHERE status = 'PENDING'";

        try (Connection conn = DBConnect.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {

            if (rs.next()) {
                confirmedOrderCount = rs.getInt(1);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return confirmedOrderCount;
    }


    @FXML
    void btAddPC(ActionEvent event) {
        Dialog<Pair<String, String>> dialog = new Dialog<>();
        dialog.setTitle("Th√™m m√°y m·ªõi");
        dialog.setHeaderText("Ch·ªçn lo·∫°i m√°y v√† nh·∫≠p ƒë·ªãa ch·ªâ IP");

        ButtonType addButtonType = new ButtonType("Th√™m", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(addButtonType, ButtonType.CANCEL);

        ChoiceBox<String> typeChoice = new ChoiceBox<>();
        typeChoice.getItems().addAll("NORMAL", "VIP");
        typeChoice.setValue("NORMAL");

        TextField ipField = new TextField();
        ipField.setPromptText("Nh·∫≠p ƒë·ªãa ch·ªâ IP (VD: 192.168.1.30)");

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 20, 20, 20));
        grid.add(new Label("Lo·∫°i m√°y:"), 0, 0);
        grid.add(typeChoice, 1, 0);
        grid.add(new Label("ƒê·ªãa ch·ªâ IP:"), 0, 1);
        grid.add(ipField, 1, 1);

        dialog.getDialogPane().setContent(grid);

        Node addButton = dialog.getDialogPane().lookupButton(addButtonType);
        addButton.setDisable(true);

        ipField.textProperty().addListener((obs, oldVal, newVal) -> {
            addButton.setDisable(newVal.trim().isEmpty() ||
                    !newVal.matches("^((25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)(\\.|$)){4}$"));
        });

        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == addButtonType) {
                return new Pair<>(typeChoice.getValue(), ipField.getText().trim());
            }
            return null;
        });

        Optional<Pair<String, String>> result = dialog.showAndWait();

        result.ifPresent(data -> {
            String selectedType = data.getKey();
            String ipAddress = data.getValue();

            int newNumber = ComputerDB.getNextComputerNumber(selectedType);
            String newName = (selectedType.equals("VIP") ? "VIP " : "M√°y ") + newNumber;

            Computer newComputer = new Computer(
                    0,
                    newName,
                    "AVAILABLE",
                    selectedType,
                    true,
                    ipAddress  // üëà Truy·ªÅn IP
            );

            ComputerDB.addComputer(newComputer);
            addComputerToUI(newComputer);

            System.out.println("‚úÖ ƒê√£ th√™m m√°y: " + newComputer.getName() + " [" + ipAddress + "]");
        });
    }

    @FXML
    void btUpdatePrice(ActionEvent event) {
        // L·∫•y gi√° hi·ªán t·∫°i
        int currentNormalPrice = com.example.cnetcoffee.dao.PriceDAO.getPricePerHour("NORMAL");
        int currentVipPrice = com.example.cnetcoffee.dao.PriceDAO.getPricePerHour("VIP");

        // T·∫°o Dialog
        Dialog<Void> dialog = new Dialog<>();
        dialog.setTitle("C·∫≠p nh·∫≠t gi√° ti·ªÅn");
        dialog.setHeaderText("Nh·∫≠p gi√° m·ªõi cho t·ª´ng lo·∫°i m√°y");

        // N√∫t OK v√† Cancel
        ButtonType okButtonType = new ButtonType("C·∫≠p nh·∫≠t", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(okButtonType, ButtonType.CANCEL);

        // T·∫°o UI nh·∫≠p li·ªáu
        TextField tfNormal = new TextField();
        tfNormal.setPromptText("Gi√° m√°y th∆∞·ªùng");
        TextField tfVip = new TextField();
        tfVip.setPromptText("Gi√° m√°y VIP");

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);

        // Th√™m d√≤ng hi·ªÉn th·ªã gi√° hi·ªán t·∫°i
        grid.add(new Label("Gi√° m√°y th∆∞·ªùng hi·ªán t·∫°i:"), 0, 0);
        grid.add(new Label(String.valueOf(currentNormalPrice)), 1, 0);
        grid.add(new Label("Gi√° m√°y VIP hi·ªán t·∫°i:"), 0, 1);
        grid.add(new Label(String.valueOf(currentVipPrice)), 1, 1);

        // Th√™m c√°c tr∆∞·ªùng nh·∫≠p li·ªáu b√™n d∆∞·ªõi
        grid.add(new Label("M√°y th∆∞·ªùng m·ªõi:"), 0, 2);
        grid.add(tfNormal, 1, 2);
        grid.add(new Label("M√°y VIP m·ªõi:"), 0, 3);
        grid.add(tfVip, 1, 3);

        dialog.getDialogPane().setContent(grid);

        // Disable OK n·∫øu ch∆∞a nh·∫≠p ƒë·ªß
        Node okButton = dialog.getDialogPane().lookupButton(okButtonType);
        okButton.setDisable(true);

        tfNormal.textProperty().addListener((obs, oldVal, newVal) -> {
            okButton.setDisable(tfNormal.getText().trim().isEmpty() || tfVip.getText().trim().isEmpty());
        });
        tfVip.textProperty().addListener((obs, oldVal, newVal) -> {
            okButton.setDisable(tfNormal.getText().trim().isEmpty() || tfVip.getText().trim().isEmpty());
        });

        // X·ª≠ l√Ω khi nh·∫•n OK
        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == okButtonType) {
                try {
                    int normalPrice = Integer.parseInt(tfNormal.getText().trim());
                    int vipPrice = Integer.parseInt(tfVip.getText().trim());
                    com.example.cnetcoffee.dao.PriceDAO.updatePrice("NORMAL", normalPrice);
                    com.example.cnetcoffee.dao.PriceDAO.updatePrice("VIP", vipPrice);
                    showAlert(Alert.AlertType.INFORMATION, "Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t gi√° ti·ªÅn!");
                } catch (NumberFormatException e) {
                    showAlert(Alert.AlertType.ERROR, "L·ªói", "Vui l√≤ng nh·∫≠p gi√° h·ª£p l·ªá!");
                }
            }
            return null;
        });
        dialog.showAndWait();
    }

    private void addComputerToUI(Computer computer) {
        // T·∫°o Pane cho m√°y t√≠nh
        Pane computerPane = new Pane();
        computerPane.setPrefSize(135, 140);
        computerPane.setCursor(Cursor.HAND);
        computerPane.setTranslateX(10);
        computerPane.setTranslateY(10);
        updateComputerStyle(computerPane, computer.getStatus(), computer.getType());


        // T·∫°o ImageView cho h√¨nh ·∫£nh m√°y t√≠nh
        ImageView imageView = new ImageView(new Image(getClass().getResource("/img/pc.jpg").toExternalForm()));
        imageView.setFitWidth(122);
        imageView.setFitHeight(102);
        imageView.setLayoutX(6);
        imageView.setLayoutY(6);

        // T·∫°o Label cho t√™n m√°y t√≠nh
        Label nameLabel = new Label(computer.getName());
        nameLabel.setLayoutX(47);
        nameLabel.setLayoutY(110);
        nameLabel.getStyleClass().add("computer-name-label"); // Th√™m l·ªõp CSS

        // T·∫°o menu chu·ªôt ph·∫£i
        ContextMenu contextMenu = new ContextMenu();
        MenuItem startItem = new MenuItem("B·∫≠t m√°y");
        MenuItem shutdownItem = new MenuItem("T·∫Øt m√°y");
        MenuItem detailsItem = new MenuItem("Chi ti·∫øt");
        MenuItem deleteItem = new MenuItem("üóë X√≥a m√°y");

        startItem.setOnAction(event -> {
            turnOnComputerForUser(computer, computerPane);
        });

        shutdownItem.setOnAction(event -> {
            turnOffComputer(computer, computerPane);
        });

        deleteItem.setOnAction(event -> {
            ComputerDB.deleteComputer(computer.getId());

            if ("VIP".equalsIgnoreCase(computer.getType())) {
                flowPaneVIP.getChildren().remove(computerPane);
            } else {
                flowPaneNormal.getChildren().remove(computerPane);
            }

            System.out.println("üóë ƒê√£ x√≥a m√°y: " + computer.getName());
        });


        contextMenu.getItems().addAll(startItem, shutdownItem, detailsItem, deleteItem);

        // Hi·ªÉn th·ªã menu khi click chu·ªôt ph·∫£i
        computerPane.setOnContextMenuRequested(event -> contextMenu.show(computerPane, event.getScreenX(), event.getScreenY()));

        computerPane.getChildren().addAll(imageView, nameLabel);
        if ("VIP".equalsIgnoreCase(computer.getType())) {
            flowPaneVIP.getChildren().add(computerPane);
        } else {
            flowPaneNormal.getChildren().add(computerPane);
        }
    }

    @FXML
    void btHome(ActionEvent event) {

    }

    @FXML
    void btIndividual(ActionEvent event) {
        StageManager.openPopup("/com/example/cnetcoffee/admin/personal.fxml", "C√° nh√¢n");
    }

    @FXML
    void btLogout(MouseEvent event) {
        StageManager.switchScene("/com/example/cnetcoffee/admin/login.fxml", "ƒêƒÉng nh·∫≠p", true);
    }

    // n√∫t button qu·∫£n l√Ω
    @FXML
    private VBox managementMenu, statisticalMenu;
    private boolean isManagementExpanded = false;
    private boolean isStatisticalExpanded = false;
    @FXML
    void toggleManagementMenu(ActionEvent event) {
        if (isManagementExpanded) {
            managementMenu.getChildren().removeIf(node -> node instanceof Button && !node.equals(btManagement));
        } else {
            Button userManager = new Button("Qu·∫£n l√Ω ng∆∞·ªùi d√πng");
            Button accountManager = new Button("Qu·∫£n l√Ω t√†i kho·∫£n");
            Button productManager = new Button("Qu·∫£n l√Ω s·∫£n ph·∫©m");

            userManager.getStyleClass().add("menu-button");
            accountManager.getStyleClass().add("menu-button");
            productManager.getStyleClass().add("menu-button");


            userManager.setOnAction(event1 -> StageManager.switchScene("/com/example/cnetcoffee/admin/user_manager.fxml", "Account Manager", true));
            accountManager.setOnAction(event1 -> StageManager.switchScene("/com/example/cnetcoffee/admin/admin_manager.fxml", "Account Manager", true));
            productManager.setOnAction(event1 -> StageManager.switchScene("/com/example/cnetcoffee/admin/product.fxml", "Product Manager", true));
            managementMenu.getChildren().addAll(userManager, productManager);

            if (SessionManager.isAdmin()) {
                managementMenu.getChildren().add(accountManager);
            }
        }
        isManagementExpanded = !isManagementExpanded;
    }


    @FXML
    void btStatistical(ActionEvent event) {
        if (isStatisticalExpanded) {
            // Thu g·ªçn menu - X√≥a c√°c n√∫t con, gi·ªØ l·∫°i n√∫t g·ªëc (btStatistical)
            statisticalMenu.getChildren().removeIf(node -> node instanceof Button && !node.equals(btStatistical));
        } else {
            // M·ªü r·ªông menu - Th√™m c√°c n√∫t ch·ª©c nƒÉng

            // T·∫°o n√∫t "Th·ªëng k√™ doanh thu m√°y"
            Button statisticalRevenueMachine = new Button("Th·ªëng k√™ doanh thu m√°y");
            statisticalRevenueMachine.getStyleClass().add("menu-button");
            statisticalRevenueMachine.setOnAction(event1 -> StageManager.switchScene("/com/example/cnetcoffee/admin/statistical_revenue.fxml", "Th·ªëng k√™ doanh thu m√°y", true));

            // T·∫°o n√∫t "Th·ªëng k√™ doanh thu d·ªãch v·ª•"
            Button statisticalRevenueService = new Button("Th·ªëng k√™ doanh thu d·ªãch v·ª•");
            statisticalRevenueService.getStyleClass().add("menu-button");
            statisticalRevenueService.setOnAction(event1 -> StageManager.switchScene("/com/example/cnetcoffee/admin/Service_revenue_statistics.fxml", "Th·ªëng k√™ doanh thu d·ªãch v·ª•", true));

            //T·∫°o n√∫t th·ªëng k√™ t·ªïng
            Button staticticalRevenueSummary = new Button("Th·ªëng k√™ doanh thu ti·ªám");
            staticticalRevenueSummary.getStyleClass().add("menu-button");
            staticticalRevenueSummary.setOnAction(event1 -> StageManager.switchScene("/com/example/cnetcoffee/admin/revenue_summary.fxml","Th·ªëng k√™ doanh thu ti·ªám", true));

            // Th√™m c√°c n√∫t v√†o menu
            statisticalMenu.getChildren().addAll(statisticalRevenueMachine, statisticalRevenueService,staticticalRevenueSummary);
        }
        isStatisticalExpanded = !isStatisticalExpanded;
    }



    @FXML
    public void btServiceUser(ActionEvent event)
    {
        StageManager.switchScene("/com/example/cnetcoffee/admin/statiscal_service.fxml", "D·ªãch v·ª•", true);
    }

    private static User currentUser;

    @FXML
    void btTurnOffAllPc(ActionEvent event) {
        User currentUser = SessionManager.getCurrentUser(); // L·∫•y user ƒëang ƒëƒÉng nh·∫≠p

        if (currentUser == null) {
            showAlert(Alert.AlertType.ERROR, "L·ªói", "Kh√¥ng c√≥ ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p!");
            return;
        }

        // Hi·ªÉn th·ªã c·∫£nh b√°o tr∆∞·ªõc khi t·∫Øt t·∫•t c·∫£ m√°y
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("X√°c nh·∫≠n t·∫Øt t·∫•t c·∫£ m√°y");
        alert.setHeaderText("‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫Øt t·∫•t c·∫£ m√°y kh√¥ng?");
        alert.setContentText("H√†nh ƒë·ªông n√†y s·∫Ω t·∫Øt t·∫•t c·∫£ m√°y ƒëang ho·∫°t ƒë·ªông.");

        ButtonType buttonYes = new ButtonType("ƒê·ªìng √Ω", ButtonBar.ButtonData.OK_DONE);
        ButtonType buttonNo = new ButtonType("H·ªßy", ButtonBar.ButtonData.CANCEL_CLOSE);
        alert.getButtonTypes().setAll(buttonYes, buttonNo);

        alert.showAndWait().ifPresent(response -> {
            if (response == buttonYes) {
                Dialog<String> dialog = new Dialog<>();
                dialog.setTitle("X√°c th·ª±c qu·∫£n tr·ªã");
                dialog.setHeaderText("üîí Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ x√°c nh·∫≠n");

                ButtonType confirmButton = new ButtonType("X√°c nh·∫≠n", ButtonBar.ButtonData.OK_DONE);
                dialog.getDialogPane().getButtonTypes().addAll(confirmButton, ButtonType.CANCEL);

                PasswordField passwordField = new PasswordField();
                passwordField.setPromptText("Nh·∫≠p m·∫≠t kh·∫©u");

                GridPane grid = new GridPane();
                grid.setHgap(10);
                grid.setVgap(10);
                grid.add(new Label("M·∫≠t kh·∫©u:"), 0, 0);
                grid.add(passwordField, 1, 0);

                dialog.getDialogPane().setContent(grid);

                // Ch·ªâ cho ph√©p nh·∫•n "X√°c nh·∫≠n" khi m·∫≠t kh·∫©u kh√¥ng r·ªóng
                Node confirmButtonNode = dialog.getDialogPane().lookupButton(confirmButton);
                confirmButtonNode.setDisable(true);

                passwordField.textProperty().addListener((observable, oldValue, newValue) -> {
                    confirmButtonNode.setDisable(newValue.trim().isEmpty());
                });

                // L·∫•y gi√° tr·ªã m·∫≠t kh·∫©u khi nh·∫•n x√°c nh·∫≠n
                dialog.setResultConverter(dialogButton -> {
                    if (dialogButton == confirmButton) {
                        return passwordField.getText();
                    }
                    return null;
                });

                Optional<String> passwordOpt = dialog.showAndWait();
                passwordOpt.ifPresent(password -> {
                    if (isCorrectPassword(currentUser.getUsername(), password)) {
                        turnOffAllComputers();
                        showAlert(Alert.AlertType.INFORMATION, "Th√†nh c√¥ng", "T·∫•t c·∫£ m√°y ƒë√£ ƒë∆∞·ª£c t·∫Øt.");
                    } else {
                        showAlert(Alert.AlertType.ERROR, "L·ªói x√°c th·ª±c", "‚ùå M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c! Vui l√≤ng th·ª≠ l·∫°i.");
                    }
                });
            }
        });
    }

    // X√°c th·ª±c m·∫≠t kh·∫©u t·ª´ database
    private boolean isCorrectPassword(String username, String password) {
        UserDB userDB = new UserDB();
        User user = userDB.authenticateUser(username, password);
        return user != null && "admin".equalsIgnoreCase(user.getRole()); // Ch·ªâ cho ph√©p admin
    }

    // H√†m t·∫Øt t·∫•t c·∫£ m√°y
    private void turnOffAllComputers() {
        List<Computer> computers = ComputerDB.getAllComputers();
        boolean hasActiveComputer = false;

        for (Computer computer : computers) {
            if ("IN USE".equalsIgnoreCase(computer.getStatus())) {
                hasActiveComputer = true;
                computer.setStatus("AVAILABLE");
                computer.setAvailable(false);
                ComputerDB.updateComputerStatus(computer.getId(), "AVAILABLE", false);
            }
        }

        // C·∫≠p nh·∫≠t giao di·ªán
        Platform.runLater(() -> {
            for (javafx.scene.Node node : flowPaneNormal.getChildren()) {
                if (node instanceof Pane) {
                    ((Pane) node).setStyle("-fx-background-color: #BB0000;");
                }
            }

            for (javafx.scene.Node node : flowPaneVIP.getChildren()) {
                if (node instanceof Pane) {
                    ((Pane) node).setStyle("-fx-background-color: #BB0000;");
                }
            }
        });


        if (hasActiveComputer) {
            System.out.println("‚úÖ T·∫•t c·∫£ m√°y ƒë√£ ƒë∆∞·ª£c t·∫Øt!");
        } else {
            System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ m√°y n√†o ƒëang b·∫≠t!");
        }
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ SessionManager
        User currentUser = SessionManager.getCurrentUser();

        if (currentUser == null) {
            System.out.println("‚ùå Kh√¥ng c√≥ ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p!");
            return;
        }

        // Hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng tr√™n giao di·ªán
        user.setText("Xin ch√†o, " + currentUser.getFullName());

        // Ki·ªÉm tra vai tr√≤ c·ªßa ng∆∞·ªùi d√πng
        if (!currentUser.isAdmin()) {
            btStatistical.setDisable(true);
            statisticalMenu.setDisable(true);
        }

        if (flowPaneNormal == null || flowPaneVIP == null) {
            System.out.println("‚ùå M·ªôt trong hai FlowPane ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
        } else {
            System.out.println("‚úÖ flowPaneNormal v√† flowPaneVIP ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.");
        }

        loadComputers();

        tfSearchPC.setOnKeyReleased(event -> searchPC());
        Timeline autoRefresh = new Timeline(
                new KeyFrame(Duration.seconds(3), event -> {
                    loadComputers();
                })
        );
        autoRefresh.setCycleCount(Animation.INDEFINITE);
        autoRefresh.play();
        // Update s·ªë l∆∞·ª£ng ƒë∆°n h√†ng ƒë√£ x√°c nh·∫≠n
        updateOrderCount();

        // Update sau 15s
        Timeline timeline = new Timeline(
                new KeyFrame(Duration.seconds(15), e -> updateOrderCount())
        );
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.play();

    }

    private void updateComputerStyle(Pane computerPane, String status, String type) {
        computerPane.getStyleClass().clear();
        if ("VIP".equalsIgnoreCase(type)) {
            switch (status) {
                case "READY":
                    computerPane.getStyleClass().add("computer-pane-ready");
                    break;
                case "IN USE":
                    computerPane.getStyleClass().add("computer-pane-in-use");
                    break;
                case "AVAILABLE":
                default:
                    computerPane.getStyleClass().add("computer-pane");
                    break;
            }
        } else {
            switch (status) {
                case "READY":
                    computerPane.getStyleClass().add("computer-pane-ready");
                    break;
                case "IN USE":
                    computerPane.getStyleClass().add("computer-pane-in-use");
                    break;
                case "AVAILABLE":
                default:
                    computerPane.getStyleClass().add("computer-pane");
                    break;
            }
        }
    }

    // B·∫≠t m√°y cho kh√°ch
    private void turnOnComputerForUser(Computer computer, Pane computerPane) {
        computer.setStatus("IN USE");
        computer.setAvailable(true);

        boolean isSuccess = ClientSocketHandler.sendCommand("TURN_ON " + computer.getId());

        if (isSuccess) {
            ComputerDB.updateComputerStatus(computer.getId(), "IN USE", true);
            updateComputerStyle(computerPane, "IN USE", computer.getType());
            System.out.println("‚úÖ M√°y " + computer.getName() + " ƒë√£ b·∫≠t v√† ƒëang ch·ªù ng∆∞·ªùi d√πng.");

            // --- T·∫°o session cho kh√°ch ---
            int guestUserId = UserDB.getGuestUserId();
            if (guestUserId == -1) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng m·∫∑c ƒë·ªãnh (guest_user)!");
                return;
            }
            User guestUser = new UserDB().getUserById(guestUserId);
            if (guestUser == null) {
                System.out.println("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng m·∫∑c ƒë·ªãnh!");
                return;
            }

            String computerType = computer.getType();
            int sessionId = new SessionDAO().createSession(guestUserId, computer.getId(), computerType);

            // --- L∆∞u th√¥ng tin v√†o SessionManager (n·∫øu c·∫ßn) ---
            SessionManager.setGuestMode(true);
            SessionManager.setAssignedComputerId(computer.getId());
            SessionManager.setCurrentSessionId(sessionId);
            Session session = new SessionDAO().getSessionById(sessionId);
            SessionManager.setCurrentSession(session);

            // --- G·ª≠i l·ªánh cho client ƒë·ªÉ hi·ªÉn th·ªã home_user.fxml ---
            try (Socket userSocket = new Socket("localhost", 13000);
                 PrintWriter out = new PrintWriter(userSocket.getOutputStream(), true)) {
                out.println("TURN_ON " + computer.getId());
            } catch (IOException e) {
                System.out.println("‚ö†Ô∏è Kh√¥ng g·ª≠i ƒë∆∞·ª£c TURN_ON ƒë·∫øn m√°y user");
            }
        } else {
            System.out.println("‚ö†Ô∏è Kh√¥ng th·ªÉ b·∫≠t m√°y " + computer.getName());
        }
    }

    // T·∫Øt m√°y
    private void turnOffComputer(Computer computer, Pane computerPane) {
        computer.setStatus("READY");
        computer.setAvailable(false);

        boolean isSuccess = ClientSocketHandler.sendCommand("TURN_OFF " + computer.getId());
        if (isSuccess) {
            ComputerDB.updateComputerStatus(computer.getId(), "READY", true);
            computerPane.getStyleClass().remove("computer-pane-in-use");
            computerPane.getStyleClass().add("computer-pane");
            System.out.println("‚ùå M√°y " + computer.getName() + " ƒë√£ t·∫Øt.");
            try (Socket userSocket = new Socket("localhost", 13000);
                 PrintWriter out = new PrintWriter(userSocket.getOutputStream(), true)) {
                out.println("TURN_OFF " + computer.getId());

                // ƒê·ª£i client x·ª≠ l√Ω xong (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh th·ªùi gian n·∫øu c·∫ßn)
                Thread.sleep(500);

                // L·∫•y user_id c·ªßa guest_user (ho·∫∑c user th·∫≠t n·∫øu c·∫ßn)
                int guestUserId = UserDB.getGuestUserId();
                // L·∫•y session ENDED m·ªõi nh·∫•t cho m√°y n√†y
                Session endedSession = new SessionDAO().getLastEndedSessionByUserAndComputer(guestUserId, computer.getId());
                if (endedSession != null && endedSession.getTotalCost() != null) {
                    double totalCost = endedSession.getTotalCost().doubleValue();
                    showAlert(Alert.AlertType.INFORMATION, "Thanh to√°n",
                            "S·ªë ti·ªÅn c·∫ßn thanh to√°n cho " + computer.getName() + ": " + String.format("%,.0f", totalCost) + " ƒë");
                } else {
                    showAlert(Alert.AlertType.WARNING, "Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n cho m√°y n√†y!");
                }
            } catch (IOException | InterruptedException e) {
                System.out.println("‚ö†Ô∏è Kh√¥ng g·ª≠i ƒë∆∞·ª£c TURN_OFF ƒë·∫øn m√°y user");
            }
        } else {
            System.out.println("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫Øt m√°y " + computer.getName());
        }
    }

    private void loadComputers() {
        flowPaneNormal.getChildren().clear();
        flowPaneVIP.getChildren().clear();
        List<Computer> computerList = ComputerDB.getAllComputers();
        for (Computer computer : computerList) {
            addComputerToUI(computer);
        }

    }

    // t√¨m ki·∫øm pc
    private void searchPC() {
        String searchText = removeDiacritics(tfSearchPC.getText().trim().toLowerCase());

        flowPaneNormal.getChildren().clear();
        flowPaneVIP.getChildren().clear();

        if (searchText.isEmpty()) {
            List<Computer> allComputers = ComputerDB.getAllComputers();
            for (Computer computer : allComputers) {
                addComputerToUI(computer);
            }
            return;
        }

        List<Computer> computers = ComputerDB.getAllComputers();
        boolean found = false;

        for (Computer computer : computers) {
            String computerName = removeDiacritics(computer.getName().toLowerCase());

            if (computerName.contains(searchText)) {
                addComputerToUI(computer);
                found = true;
            }
        }

        if (!found) {
            Label noResultLabel = new Label("Kh√¥ng t√¨m th·∫•y m√°y: " + searchText);
            noResultLabel.setStyle("-fx-font-size: 16px; -fx-text-fill: red; -fx-font-weight: bold;");
            flowPaneNormal.getChildren().add(noResultLabel);
            flowPaneVIP.getChildren().add(noResultLabel);
        }
    }

    // H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
    private String removeDiacritics(String str) {
        String normalized = Normalizer.normalize(str, Normalizer.Form.NFD);
        return Pattern.compile("\\p{M}").matcher(normalized).replaceAll("").replace("ƒë", "d").replace("ƒê", "D");
    }

    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

}
